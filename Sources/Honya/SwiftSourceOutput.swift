//
//  File.swift
//  
//
//  Created by hiragram on 2022/08/24.
//

import Foundation

struct SwiftSourceOutput {
    private let input: Input

    init(input: Input) {
        self.input = input
    }

    var output: String {
"""
/// This file is generated by Honya.
/// DO NOT EDIT. Any changes to this file will be removed.
import SwiftUI

public enum Localization {
    
"""
   + generateCasesForAllCategory().replacingOccurrences(of: "\n", with: "\n    ")

   + generateAllKeys()

   + generateAllLocalizationKeys()

   + generateCVarArgs()
    +
"""
}

private class DummyForBundle {}
"""
    }

    private func generateCasesForAllCategory() -> String {
        generateCases(items: input.items)
    }

    private func generateCases(items: [Item]) -> String {
        items.map { item in
            let comments = item.localizations.map { language, string in
                "// \(language): \(string)"
            }.sorted(by: { $0 < $1 }).joined(separator: "\n")

            let argumentList = item.arguments?
                .map({ argument in
                    "\(argument.name): \(argument.type)"
                })
                .joined(separator: ", ")

            let arguments = argumentList.map {
                "(\($0))"
            } ?? ""

            return """
            \(comments)
            case \(generateCaseName(key: item.key))\(arguments)

            """
        }.joined(separator: "\n")
    }

    private func localizationKey(item: Item) -> String {
        item.getLocalizationKey()
    }

    private func generateCaseName(key: String) -> String {
        return key
    }

    private func generateAllKeys() -> String {
        let cases = generateKeys(items: input.items)
            .replacingOccurrences(of: "\n", with: "\n        ")

        return
"""

    var rawValue: String {
        switch self {
        \(cases)
        }
    }

"""
    }

    private func generateKeys(items: [Item]) -> String {
        let cases = items.map { item in
            "case .\(item.key): return \"\(localizationKey(item: item))\""
        }.joined(separator: "\n")
        return cases
    }

    private func generateAllLocalizationKeys() -> String {
        let cases = generateLocalizationKeys(items: input.items)
            .replacingOccurrences(of: "\n", with: "\n        ")
        
        return
"""

    var localizationKey: LocalizedStringKey {
        switch self {
        \(cases)
        }
    }

"""
    }

    private func generateLocalizationKeys(items: [Item]) -> String {
        let cases = items.map { item in
            if let arguments = item.arguments, !arguments.isEmpty {
                let argumentsText = arguments
                    .map {
                        "\($0.name): let \($0.name)"
                    }
                    .joined(separator: ", ")
                let rawLocalizationKey = localizationKey(item: item).split(separator: " ").first!
                let argumentInterpolations = arguments
                    .map {
                        "\\(\($0.name))"
                    }
                    .joined(separator: " ")
                return "case .\(generateCaseName(key: item.key))(\(argumentsText)): return \"\(rawLocalizationKey) \(argumentInterpolations)\""
            } else {
                return "case .\(generateCaseName(key: item.key)): return \"\(localizationKey(item: item))\""
            }
        }.joined(separator: "\n")

        print(cases)

        return cases
    }

    private func generateCVarArgs() -> String {
        let cases = generateCVarArgRows(items: input.items)
        .replacingOccurrences(of: "\n", with: "\n        ")

        return
"""

    var cVarArgs: [CVarArg] {
        switch self {
        \(cases)
        }
    }

"""
    }

    private func generateCVarArgRows(items: [Item]) -> String {
        let cases = items.map { item in
            if let arguments = item.arguments {
                let argumentsText = arguments
                    .map {
                        "\($0.name): let \($0.name)"
                    }
                    .joined(separator: ", ")
                let rawLocalizationKey = localizationKey(item: item).split(separator: " ").first!
                let argumentInterpolations = arguments
                    .map {
                        "\\(\($0.name))"
                    }
                    .joined(separator: " ")
                return "case .\(generateCaseName(key: item.key))(\(argumentsText)): return \(item.getArguments())"
            } else {
                return "case .\(generateCaseName(key: item.key)): return []"
            }
        }.joined(separator: "\n")

        print(cases)

        return cases
    }

}
